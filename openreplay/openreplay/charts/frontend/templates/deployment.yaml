---
# Source: openreplay/charts/frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-openreplay
  namespace: unhelm-namespace-placeholder
  labels:
    helm.sh/chart: frontend-0.1.0
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: frontend-openreplay
      securityContext:
        {}
      containers:
        - name: frontend
          securityContext:
            {}
          image: "public.ecr.aws/p1t3u8a3/frontend:v1.8.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: AWS_ACCESS_KEY_ID
              value: changeMeMinioAccessKey
            - name: AWS_SECRET_ACCESS_KEY
              value: changeMeMinioPassword
            - name: AWS_REGION
              value: 'us-east-1'
            - name: LICENSE_KEY
              value: ''
            - name: REDIS_STRING
              value: 'redis-master.db.svc.cluster.local:6379'
            - name: KAFKA_SERVERS
              value: 'kafka.db.svc.cluster.local:9092'
            - name: KAFKA_USE_SSL
              value: 'false'
            - name: POSTGRES_STRING
              value: 'postgres://postgres:changeMePassword@postgresql.db.svc.cluster.local:5432/postgres'
            # We need to check what is the object store endpoint.
            # There can be 4 options
            # 1. Using minio inside kube clster
            # 2. Using minio managed external cluster, like aws minio offering
            # 3. Using GCP or other object stores compatible with s3 apis
            # 4. Using AWS itself.
            # AWS uses bucketname.endpoint/object while others use endpoint/bucketname/object
            - name: ASSETS_ORIGIN
              # S3 compatible storage
              value: 'http://minio.db.svc.cluster.local:9000/sessions-assets'
            - name: CACHE_ASSETS
              value: 'true'
            - name: HTTP_PORT
              value: '80'
            - name: S3_BUCKET_IOS_IMAGES
              value: 'sessions-mobile-assets'
            - name: TOKEN_SECRET
              value: 'secret_token_string'
          ports:
            - name: frontend
              containerPort: 8080
              protocol: TCP
          resources:
            {}
